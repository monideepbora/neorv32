ifndef NEORV32_LOCAL_COPY
    $(error NEORV32_LOCAL_COPY is undefined)
endif

TARGET_SIM   ?= ghdl
TARGET_FLAGS ?= $(RISCV_TARGET_FLAGS)

ifeq ($(shell command -v $(TARGET_SIM) 2> /dev/null),)
    $(error Target simulator executable '$(TARGET_SIM)` not found)
endif

RUN_TARGET=\
	cd $(work_dir_isa); \
	rm -f $(work_dir_isa)/*.out; \
	echo "copying/using SIM-only IMEM (ROM!)"; \
	rm -f $(NEORV32_LOCAL_COPY)/rtl/core/neorv32_imem.vhd; \
	cp -f $(NEORV32_LOCAL_COPY)/sim/rtl_modules/neorv32_imem.vhd $(NEORV32_LOCAL_COPY)/rtl/core/neorv32_imem.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_A/c\CPU_EXTENSION_RISCV_A  => false, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_C/c\CPU_EXTENSION_RISCV_C  => false, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_E/c\CPU_EXTENSION_RISCV_E  => false, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_M/c\CPU_EXTENSION_RISCV_M  => false, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_U/c\CPU_EXTENSION_RISCV_U  => false, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_Zicsr/c\CPU_EXTENSION_RISCV_Zicsr  => true, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/CPU_EXTENSION_RISCV_Zifencei/c\CPU_EXTENSION_RISCV_Zifencei  => false, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/constant ext_imem_c/c\constant ext_imem_c : boolean := false; -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/signal ext_ram_a : ext_mem_a_ram_t/c\signal ext_ram_a : ext_mem_a_ram_t; -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/MEM_INT_IMEM_USE/c\MEM_INT_IMEM_USE  => true, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/MEM_INT_IMEM_SIZE/c\MEM_INT_IMEM_SIZE  => 2*1024*1024, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	sed -i '/MEM_INT_IMEM_ROM/c\MEM_INT_IMEM_ROM  => true, -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/sim/neorv32_tb.vhd; \
	find . -type f -exec touch {} +
	make -C $(NEORV32_LOCAL_COPY)/sw/example/blink_led main.elf; \
	cp -f $< $(NEORV32_LOCAL_COPY)/sw/example/blink_led/main.elf; \
	make -C $(NEORV32_LOCAL_COPY)/sw/example/blink_led main.bin; \
	make -C $(NEORV32_LOCAL_COPY)/sw/example/blink_led install; \
	sed -i '/type application_init_image_t/c\type application_init_image_t is array (0 to ((2*1024*1024)/4)-1) of std_ulogic_vector(31 downto 0); -- MOD. BY RISCV-COMPL. TEST SCRIPT' $(NEORV32_LOCAL_COPY)/rtl/core/neorv32_application_image.vhd; \
	sh $(NEORV32_LOCAL_COPY)/sim/ghdl/ghdl_sim.sh --stop-time=$(SIM_TIME) >> /dev/null; \
	cp $(work_dir_isa)/neorv32.uart.sim_mode.data.out $(*).signature.output;


RISCV_PREFIX   ?= riscv32-unknown-elf-
RISCV_GCC      ?= $(RISCV_PREFIX)gcc
RISCV_OBJDUMP  ?= $(RISCV_PREFIX)objdump
RISCV_OBJCOPY  ?= $(RISCV_PREFIX)objcopy
RISCV_READELF  ?= $(RISCV_PREFIX)readelf
RISCV_GCC_OPTS ?= -static -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles -march=rv32i -mabi=ilp32

COMPILE_TARGET=\
	$$(RISCV_GCC) $(1) $$(RISCV_GCC_OPTS) \
	$$(RISCV_TARGET_FLAGS) \
	-I$(ROOTDIR)/riscv-test-suite/env/ \
	-I$(TARGETDIR)/$(RISCV_TARGET)/ \
	-T$(TARGETDIR)/$(RISCV_TARGET)/link.imem_rom.ld \
	$$(<) -o $$@
